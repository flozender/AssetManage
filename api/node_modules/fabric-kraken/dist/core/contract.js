"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fabric_contract_api_1 = require("fabric-contract-api");
const context_1 = require("./context");
const permissionService_1 = require("../services/permissionService");
class KrakenContract extends fabric_contract_api_1.Contract {
    constructor(alias) {
        super(alias);
    }
    createContext() {
        return new context_1.default();
    }
    beforeTransaction(ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            const [contract, method] = ctx.stub.getFunctionAndParameters().fcn.split(':');
            const currentContractName = this.constructor.name;
            if (!permissionService_1.default.hasPermission(ctx, currentContractName, method))
                throw new Error(`'${ctx.author.userId}' from '${ctx.author.mspId}' does not have permission to call '${method}' on '${contract}'`);
        });
    }
}
exports.default = KrakenContract;
//# sourceMappingURL=contract.js.map