import { Iterators } from 'fabric-shim';
import { ClassType } from 'class-transformer/ClassTransformer';
/**
 * Goes through a StateQueryIterator and saves the iterables into an Array.
 * The contents of the Array are then validated against a Class.
 * @param {Iterators.StateQueryIterator} iterator
 * @param {ClassType<T>} validationType
 */
export declare function toArray<T>(iterator: Iterators.StateQueryIterator, validationType?: ClassType<T>): Promise<Array<{
    key: string;
    value: T | T[];
}>>;
/**
 * Goes through a HistoryQueryIterator and saves the iterables into an Array.
 * The timestamps in the key modifications can be given a custom format.
 * @param {Iterators.HistoryQueryIterator} iterator
 * @param {string | boolean} timestampFormat
 */
export declare function toArray(iterator: Iterators.HistoryQueryIterator): Promise<Iterators.KeyModification[]>;
export declare function toMap<T>(iterator: Iterators.StateQueryIterator, validateAs?: ClassType<T>): Promise<Map<string, T>>;
export declare function toMap(iterator: Iterators.HistoryQueryIterator): Promise<Map<string, Iterators.KeyModification>>;
interface KeyModificationDelta {
    new?: any;
    old?: any;
    path?: Array<string | number>;
    type: string;
}
interface KeyModificationValue {
    old: any;
    new: any;
    delta?: KeyModificationDelta[];
}
interface KeyModificationDifference {
    value: KeyModificationValue;
    timestamp: Date;
    tx_id: string;
}
export declare function toDiff(keyModifications: Map<string, Iterators.KeyModification>): Map<string, KeyModificationDifference>;
export declare function toDiff(keyModifications: Iterators.KeyModification[]): KeyModificationDifference[];
export {};
