"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../common/constants");
// ------------------------------------------------------------------------
// Parsing Dates in a structure
// ------------------------------------------------------------------------
/**
 * Iterates through every attribute in the supplied object searching for ISO strings,
 * converting them into a Date objects.
 *
 * Look at how to read annotations from class-validator
 *
 * @param objectWithStringDates
 */
function findAndConvertDates(objectWithStringDates) {
    for (const key of Object.keys(objectWithStringDates)) {
        if (typeof objectWithStringDates[key] === 'string' &&
            constants_1.ISO_DATE_REGEX.test(objectWithStringDates[key])) {
            objectWithStringDates[key] = new Date(objectWithStringDates[key]);
        }
        else if (typeof objectWithStringDates[key] === 'object') {
            objectWithStringDates[key] = findAndConvertDates(objectWithStringDates[key]);
        }
    }
    return objectWithStringDates;
}
exports.findAndConvertDates = findAndConvertDates;
// ------------------------------------------------------------------------
// Structures
// ------------------------------------------------------------------------
/**
 * Converts a Map into an Object with a string:T key signature.
 * @param map
 */
function mapToObject(map) {
    const mapAsObj = {};
    for (const [k, v] of map)
        mapAsObj[k] = v;
    return mapAsObj;
}
exports.mapToObject = mapToObject;
/**
 * Converts a Set into an array of Ts
 * @param set
 */
function setToArray(set) {
    const setAsArr = [];
    for (const element of set.values()) {
        setAsArr.push(element);
    }
    return setAsArr;
}
exports.setToArray = setToArray;
/**
 * Parses an ISO date string into a Date object.
 * @param dateAsString
 */
function stringToDate(dateAsString) {
    const dateAsDate = new Date(dateAsString);
    const check = (candidate) => {
        const candidateAsNumber = candidate;
        return candidate instanceof Date && !isNaN(candidateAsNumber);
    };
    if (check(dateAsDate))
        return dateAsDate;
    else
        throw new Error(`Invalid date string`);
}
exports.stringToDate = stringToDate;
//# sourceMappingURL=parse.js.map