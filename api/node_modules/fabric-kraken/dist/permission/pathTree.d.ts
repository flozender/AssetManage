/**
 * Node in the PathTree
 */
export interface PathTreeNode {
    [childNode: string]: PathTreeNode | PathTreeLeafNode;
}
/**
 * Leaf in the PathTree
 */
export interface PathTreeLeafNode {
    data?: any;
}
/**
 * PathTree is a tree structure where each node can contain a 'data' property which is a any object.
 */
export default class PathTree {
    private root;
    /**
     * Initialise the tree, if no root node is provided, a blank tree is instantiated.
     * @param initialRoot
     */
    constructor(initialRoot?: PathTreeNode);
    /**
     * Creates a new node at the given path, creating intermediate nodes if they do not already exist.
     * @param path
     * @param newData
     */
    createNode(path: string[], newData?: any): void;
    /**
     * Retrieves the node at a given path.
     *
     * Errors if this node does not exist or the path terminates prematurely.
     * @param path
     */
    getNode(path: string[]): PathTreeLeafNode | PathTreeNode;
    /**
     * Updates the node's data at the given path.
     *
     * Errors if the node nodes not exist or the path terminates prematurely.
     * @param path
     * @param newData
     */
    updateNode(path: string[], newData: any): void;
    /**
     * Removes the node at the given path (and any children below).
     *
     * Errors if the node nodes not exist or the path terminates prematurely.
     * @param path
     */
    removeNode(path: string[]): void;
}
