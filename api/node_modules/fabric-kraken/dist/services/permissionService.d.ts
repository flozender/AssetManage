import { Context } from 'fabric-contract-api';
/**
 * The Permissions Service maintains a hierarchical permission tree describing who is allowed to access the app, it's controllers and their methods.
 *
 * The hierchy of the tree acts as a collection of whitelists that filter the allowed groups at each stage. For a user to have permission to call a given
 * method they must be permitted at App, Controller and Method level.
 *
 * The Permissions Service is a singleton class that maintains global permissions for the app.
 */
export default class PermissionService {
    private static ruleBook;
    /**
     * Sets groups who have permission to call methods on a specific contract.
     * @param classId
     * @param newRule
     */
    static setClassPermission(classId: string, newRule: (ctx: Context) => boolean): void;
    /**
     * Sets groups who have permission to call a specific method on a specific contract.
     * @param classId
     * @param methodId
     * @param newRule
     */
    static setMethodPermission(classId: string, methodId: string, newRule: (ctx: Context) => boolean): void;
    /**
     * Checks if the supplied identity has permissions to call a specific method on a specific contract.
     * @param candidate
     * @param namespace Permission namespace, set this to 'app'
     * @param controller
     * @param methodName
     */
    static hasPermission(ctx: Context, className: string, methodName: string): boolean;
}
/**
 *
 * @param newRule
 */
export declare function permissions(newRule: (ctx: Context) => boolean): any;
