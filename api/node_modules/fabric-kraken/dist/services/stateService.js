"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const get_1 = require("../state/get");
const put_1 = require("../state/put");
const remove_1 = require("../state/remove");
const couchdb_1 = require("../state/couchdb");
const iterators_1 = require("../mutation/iterators");
const validate_1 = require("../mutation/validate");
const constants_1 = require("../common/constants");
class StateService {
    constructor(stub) {
        if (stub === undefined || stub === null)
            throw new Error('Cannot initialise StateService without a stub');
        this.stub = stub;
    }
    // --------------------------------------------
    // Primitive
    // --------------------------------------------
    /**
     * Returns the value to which the specified key is mapped in state, throwing an error if it does not exist.
     * The returned value's schema is then optionally validated against a given Class.
     * @param key Simple/Composite key of the data in state.
     * @param options
     */
    get(key, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let objectInState;
            objectInState = util_1.isArray(key)
                ? yield get_1.getComposite(this.stub, key)
                : yield get_1.get(this.stub, key);
            if (options && options.validateAs)
                validate_1.mutateAndValidate(objectInState, options.validateAs);
            return objectInState;
        });
    }
    /**
     * Maps the specified value with the specified key in state.
     * Optionally checks if the specified key is already mapped and errors if so.
     * @param key Simple/Composite key to map data to.
     * @param value Data to placed in state.
     * @param doNotOverwrite Throws an error if data already exists at the given key [Optional].
     */
    put(key, value, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let exists = false;
            if (options && options.doNotOverwrite)
                exists = yield this.keyExists(key);
            if (exists)
                throw new Error(`Data already exists at key '${key}'`);
            return util_1.isArray(key)
                ? put_1.putComposite(this.stub, key, value)
                : put_1.put(this.stub, key, value);
        });
    }
    /**
     * Deletes the mapping for a key state if it is present in state,
     * only if the retrieved value is of the expected class type
     * @param {string | string[]} key Simple/Composite key to delete
     * @param {ClassType} validateAs Class to validate returned value's schema against. Errors if data is not an object  [Optional].
     */
    delete(key, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options && options.validateAs)
                yield this.get(key, { validateAs: options.validateAs });
            return util_1.isArray(key)
                ? remove_1.removeComposite(this.stub, key)
                : remove_1.remove(this.stub, key);
        });
    }
    // --------------------------------------------
    // Key Check
    // --------------------------------------------
    /**
     * Returns true if state contains a mapping for the specified key.
     * @param {string | string[]} key Simple/Composite Key to check.
     */
    keyExists(key) {
        return __awaiter(this, void 0, void 0, function* () {
            let value;
            try {
                value = yield this.get(key);
            }
            catch (error) {
                if (error.message.indexOf(`Invalid key`) !== -1)
                    return false;
                else
                    throw error;
            }
            return value ? true : false;
        });
    }
    // -------- Implementation --------
    getRange(startKey, endKey, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const comositeKeys = util_1.isArray(startKey) && util_1.isArray(endKey);
            const output = {};
            if (comositeKeys) {
                if (options && (options.pageSize || options.bookmark)) {
                    if (!options.pageSize)
                        options.pageSize = constants_1.DEFAULT_PAGESIZE;
                    if (!options.bookmark)
                        options.bookmark = constants_1.DEFAULT_BOOKMARK;
                    const response = yield get_1.getRangeCompositePaginated(this.stub, startKey, endKey, options.pageSize, options.bookmark);
                    output.metadata = response.metadata;
                    output.result = response.iterator;
                }
                else {
                    const response = yield get_1.getRangeComposite(this.stub, startKey, endKey);
                    output.result = response;
                    output.metadata = {
                        fetched_records_count: 0,
                        bookmark: ''
                    };
                }
            }
            else {
                if (options && (options.pageSize || options.bookmark)) {
                    if (!options.pageSize)
                        options.pageSize = constants_1.DEFAULT_PAGESIZE;
                    if (!options.bookmark)
                        options.bookmark = constants_1.DEFAULT_BOOKMARK;
                    const response = yield get_1.getRangePaginated(this.stub, startKey, endKey, options.pageSize, options.bookmark);
                    output.metadata = response.metadata;
                    output.result = response.iterator;
                }
                else {
                    const response = yield get_1.getRange(this.stub, startKey, endKey);
                    output.result = response;
                    output.metadata = {
                        fetched_records_count: 0,
                        bookmark: ''
                    };
                }
            }
            switch (options && options.returnAs) {
                case Map:
                    output.result = yield iterators_1.toMap(output.result, options.validateAs);
                    output.metadata.fetched_records_count = output.result.size;
                    break;
                case Array:
                    output.result = yield iterators_1.toArray(output.result, options.validateAs);
                    output.metadata.fetched_records_count = output.result.length;
                    break;
            }
            return output;
        });
    }
    // ############################### Implementation ###############################
    getPartial(partialKey, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let iterator;
            const output = {};
            // Is this paginated?
            if (options && (options.bookmark || options.pageSize)) {
                if (!options.pageSize)
                    options.pageSize = constants_1.DEFAULT_PAGESIZE;
                if (!options.bookmark)
                    options.bookmark = constants_1.DEFAULT_BOOKMARK;
                const response = yield get_1.getPartialCompositePaginated(this.stub, partialKey, options.pageSize, options.bookmark);
                iterator = response.iterator;
                output.metadata = response.metadata;
            }
            else {
                iterator = yield get_1.getPartialComposite(this.stub, partialKey);
            }
            // Is there validation?
            if (options && options.returnAs) {
                switch (options.returnAs) {
                    case Map:
                        output.result = yield iterators_1.toMap(iterator, options.validateAs);
                        break;
                    case Array:
                        output.result = yield iterators_1.toArray(iterator, options.validateAs);
                        break;
                }
            }
            else {
                output.result = iterator;
            }
            return output;
        });
    }
    // ############################### Implementation ###############################
    query(selector, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let iterator;
            const output = {};
            // Are there bookmarks?
            if (options && (options.bookmark || options.pageSize)) {
                if (!options.pageSize)
                    options.pageSize = constants_1.DEFAULT_PAGESIZE;
                if (!options.bookmark)
                    options.bookmark = constants_1.DEFAULT_BOOKMARK;
                const queryResponse = yield couchdb_1.queryStatePaginated(this.stub, selector, options.pageSize, options.bookmark);
                iterator = queryResponse.iterator;
                output.metadata = queryResponse.metadata;
            }
            else {
                iterator = yield couchdb_1.queryState(this.stub, selector);
            }
            // Is there validation?
            if (options && options.returnAs) {
                switch (options.returnAs) {
                    case Map:
                        output.result = yield iterators_1.toMap(iterator, options.validateAs);
                    case Array:
                        output.result = yield iterators_1.toArray(iterator, options.validateAs);
                }
            }
            else {
                output.result = iterator;
            }
            return output;
        });
    }
    // --------------------------------------------
    // Flush Function
    // --------------------------------------------
    /**
     * WARNING: HERE BE DRAGONS.
     *
     * This is a first-pass naive implementation currently under testing.
     * We do not recommend using this function yet.
     */
    flush() {
        return __awaiter(this, void 0, void 0, function* () {
            const promises = [];
            const selectAll = {
                selector: {
                    $ne: ''
                },
                use_index: '_all_docs'
            };
            const valuesInState = yield couchdb_1.queryState(this.stub, selectAll);
            // Naive implementation - Needs improving e.g. pagination, only returning keys
            const valuesAsArray = yield iterators_1.toArray(valuesInState);
            for (const value of valuesAsArray) {
                promises.push(this.delete(value.key));
            }
            yield Promise.all(promises);
        });
    }
    // -------- Implementation --------
    getHistory(key, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const iterator = util_1.isArray(key)
                ? yield get_1.getHistoryComposite(this.stub, key)
                : yield get_1.getHistory(this.stub, key);
            if (options && options.returnAs) {
                let history;
                switch (options.returnAs) {
                    case Map:
                        history = yield iterators_1.toMap(iterator);
                    case Array:
                        history = yield iterators_1.toArray(iterator);
                }
                if (options.asDifference)
                    return iterators_1.toDiff(history);
                else
                    return history;
            }
            return iterator;
        });
    }
}
exports.default = StateService;
//# sourceMappingURL=stateService.js.map