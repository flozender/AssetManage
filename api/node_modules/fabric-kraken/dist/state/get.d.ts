import { ChaincodeStub, Iterators } from 'fabric-shim';
/**
 * Gets the value stored with the given key
 *
 * @param {ChaincodeStub} stub
 * @param {string} key
 */
export declare function get(stub: ChaincodeStub, key: string): Promise<any>;
/**
 * Gets the value stored with the given composite key
 *
 * @param {ChaincodeStub} stub
 * @param {string[]} key
 */
export declare function getComposite(stub: ChaincodeStub, key: string[]): Promise<any>;
/**
 * Gets all values for keys between the startKey and endKey.
 *
 * Works with keys made of Strings and stringified Numbers and Dates.
 * @param {ChaincodeStub} stub
 * @param {string} startKey
 * @param {string} endKey
 */
export declare function getRange(stub: ChaincodeStub, startKey: string, endKey: string): Promise<Iterators.StateQueryIterator>;
/**
 * Gets all values for composite keys ending with middleSuffixes
 * between the startSuffix and endSuffix (inclusive/exclusive).
 *
 * Works with keys made of Strings and stringified Numbers / ISO Dates.
 * @param {ChaincodeStub} stub
 * @param {string[]} startKey
 * @param {string[]} endKey
 */
export declare function getRangeComposite(stub: ChaincodeStub, startKey: string[], endKey: string[]): Promise<Iterators.StateQueryIterator>;
export declare function getRangePaginated(stub: ChaincodeStub, startKey: string, endKey: string, pageSize: number, bookmark?: string): Promise<import("fabric-shim").StateQueryResponse<Iterators.StateQueryIterator>>;
export declare function getRangeCompositePaginated(stub: ChaincodeStub, startKey: string[], endKey: string[], pageSize: number, bookmark?: string): Promise<import("fabric-shim").StateQueryResponse<Iterators.StateQueryIterator>>;
/**
 * Gets all values for composite keys where *root* and *key[]* form the start of the key.
 *
 * @param {ChaincodeStub} stub
 * @param {string[]} key
 */
export declare function getPartialComposite(stub: ChaincodeStub, key: string[]): Promise<Iterators.StateQueryIterator>;
export declare function getPartialCompositePaginated(stub: ChaincodeStub, key: string[], pageSize: number, bookmark?: string): Promise<import("fabric-shim").StateQueryResponse<Iterators.StateQueryIterator>>;
/**
 * Gets the history of a given key
 *
 * @param {ChaincodeStub} stub
 * @param {string} key
 */
export declare function getHistory(stub: ChaincodeStub, key: string): Promise<Iterators.HistoryQueryIterator>;
/**
 * Gets the history of a given key
 *
 * @param {ChaincodeStub} stub
 * @param {string[]} key
 */
export declare function getHistoryComposite(stub: ChaincodeStub, key: string[]): Promise<Iterators.HistoryQueryIterator>;
