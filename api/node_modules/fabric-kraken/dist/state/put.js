"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Puts a value at the given key
 * @param {ChaincodeStub} stub
 * @param {string} key
 * @param {any} value
 */
function put(stub, key, value) {
    return __awaiter(this, void 0, void 0, function* () {
        let bytes;
        if (typeof value === 'string') {
            bytes = Buffer.from(value);
        }
        else if (typeof value === 'object' ||
            typeof value === 'number' ||
            typeof value === 'boolean') {
            const valueAsString = JSON.stringify(value);
            bytes = Buffer.from(valueAsString);
        }
        else {
            throw new Error(`Invalid value type: can only put an object, string, number or boolean, cannot put a '${typeof value}'`);
        }
        if (bytes.byteLength === 0)
            throw new Error('Cannot put an empty value into state');
        return yield stub.putState(key, bytes);
    });
}
exports.put = put;
/**
 * Puts a value at the given composite key
 * @param {ChaincodeStub} stub
 * @param {string[]} key
 * @param {any} value
 */
function putComposite(stub, key, value) {
    return __awaiter(this, void 0, void 0, function* () {
        const root = key[0];
        const suffixes = key.slice(1);
        const compKey = stub.createCompositeKey(root, suffixes);
        return put(stub, compKey, value);
    });
}
exports.putComposite = putComposite;
//# sourceMappingURL=put.js.map