"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fabric_contract_api_1 = require("fabric-contract-api");
const stateService_1 = require("../services/stateService");
const authorService_1 = require("../services/authorService");
const fabric_shim_1 = require("fabric-shim");
const mockStub_1 = require("./mockStub");
class KrakenMockContext extends fabric_contract_api_1.Context {
    constructor(stub) {
        super();
        if (!stub)
            stub = new mockStub_1.default();
        this.setChaincodeStub(stub);
        this.setClientIdentity(new fabric_shim_1.ClientIdentity(stub));
    }
    setChaincodeStub(stub) {
        this.stub = stub;
        this.state = new stateService_1.default(stub);
    }
    setClientIdentity(clientIdentity) {
        this.clientIdentity = clientIdentity;
        this.author = new authorService_1.default(clientIdentity);
    }
}
exports.KrakenMockContext = KrakenMockContext;
function makeMockContext(config) {
    return __awaiter(this, void 0, void 0, function* () {
        if (config) {
            const stub = new mockStub_1.default();
            if (config.userId)
                yield stub._setUserId(config.userId);
            if (config.mspId)
                yield stub._setMspId(config.mspId);
            const context = new KrakenMockContext(stub);
            if (config.state)
                yield context.stub._setState(config.state);
            if (config.args)
                yield context.stub._setArgs(...config.args);
            return context;
        }
        return new KrakenMockContext();
    });
}
exports.makeMockContext = makeMockContext;
//# sourceMappingURL=mockContext.js.map