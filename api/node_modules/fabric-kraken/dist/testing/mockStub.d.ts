import { ChaincodeMockStub } from '@theledger/fabric-mock-stub';
import { ChaincodeInterface } from 'fabric-shim';
import MockState, { MockStatePair } from './mockState';
/**
 * Improved version of the wearetheledger ChaincodeMockStub with helper functions to set up and retrieve from state.
 */
export default class KrakenMockStub extends ChaincodeMockStub {
    state: MockState;
    constructor(chaincode?: ChaincodeInterface);
    /**
     * Generates a certificate with the supplied userId and sets the stub to use it
     * along with the mspId supplied.
     * @param stub
     * @param userId
     * @param mspId
     */
    _setUserId(userId: string): Promise<void>;
    _setMspId(mspId: string): Promise<void>;
    /**
     * Sets the args for the current transaction context.
     * @param stub
     * @param args
     */
    _setArgs(...args: string[]): void;
    /**
     * Loads the provided data into the mocked state
     * @param newState Array of MockStatePair objects describing the KV pairs to place in state
     * @param deleteHistory remove old key and leave no trace in history before new key is inserted (defaults to true)
     * @param txId transaction ID that can be used to identify this method's effects in history
     */
    _setState(newState: MockStatePair | MockStatePair[], deleteHistory?: boolean, txId?: string): Promise<void>;
    /**
     * Remove a key from state
     * @param key key of pair to remove
     * @param deleteHistory remove key and leave no trace in history (defaults to true)
     */
    _clearState(stateToClear: MockStatePair | MockStatePair[], deleteHistory?: boolean, txId?: string): Promise<void>;
}
