import { CertificateCreationResult } from 'pem';
import { Context, Contract } from 'fabric-contract-api';
/**
 * Generates a string of random letters. Useful for generating throwaway IDs.
 */
export declare function randomText(): string;
/**
 * Creates either a simple or composite key depending on whether string or array of strings is supplied.
 *
 * @param {string | string[]}key
 */
export declare function makeKey(key: string | string[]): string;
/**
 * Breaks a composite key into an array of it's constituent keys, leaves a simple key untouched.
 * @param key
 */
export declare function unmakeKey(key: string): string | string[];
/**
 * Creates a certificate bearing the supplied common name.
 *
 * @param commonName
 */
export declare function makeCert(commonName: string): Promise<CertificateCreationResult>;
/**
 * Invoke a method on a given Contract.
 */
export declare function mockInvoke<C extends Contract>(contract: C, method: keyof C, options: {
    ctx: Context;
    txId?: string;
    beforeTransaction?: boolean;
    afterTransaction?: boolean;
}): Promise<any>;
